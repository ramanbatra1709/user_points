<?php

/**
 * @file
 * Contains user_points_login.module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\User\UserInterface;
use Drupal\user_points\Entity\UserPoints;

/**
 * Implements hook_help().
 */
function user_points_login_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_points_login module.
    case 'help.page.user_points_login':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Reward points to users on login') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_user_login().
 */
function user_points_login_user_login(UserInterface $account)  {
  // load the configuration values
  // by default 50 pts. are rewarded every 24 hrs.
  $config = \Drupal::config('user_points_login.settings');
  $login_points = $config->get('login_points');
  $frequency = $config->get('frequency');
  if ((\Drupal::time()->getRequestTime() - _last_login_timestamp()) / 3600 >= $frequency)  {
    try {
      UserPoints::create(
        [
          'field_operation' => 'Login',
          'field_points' => $login_points,
          'field_user' => $account,
        ]
      )->save();
    } catch (EntityStorageException $e) {
      \Drupal::logger('user_points')->error('Could not store the entity');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function user_points_login_form_alter(array &$form, FormStateInterface $form_state, $form_id)  {
  if ($form_id == 'user_login_form') {
    $user_points_login_validate = ['user_points_login_validate'];
    // attach custom validation handler to store login timestamp
    // before it gets updated
    if (isset($form['#validate']))  {
      $form['#validate'] = array_merge($user_points_login_validate, $form['#validate']);
    }
    else  {
      $form['#validate'] = $user_points_login_validate;
    }
  }
}


/**
 * Implements hook_validate().
 */
function user_points_login_validate(array $form, FormStateInterface $form_state)  {
  $user = \Drupal::currentUser();
  $login_timestamp = null;
  if (is_object($user)) {
    $account = \Drupal::database()->select('users_field_data', 'u')
      ->fields('u', ['login'])
      ->condition('name', $form_state->getValue('name'))
      ->execute()
      ->fetchAssoc();
    if (!empty($account)) {
      $login_timestamp = $account['login'];
    }
  }
  _last_login_timestamp($login_timestamp);
}

/**
 * Holds the login timestamp value before validation is completed
 * so that it can be used in hook_user_login()
 */
function _last_login_timestamp($login_timestamp = null)  {
  static $timestamp;
  if (!isset($timestamp) && $login_timestamp > 0) {
    $timestamp = $login_timestamp;
  }
  return $timestamp;
}
